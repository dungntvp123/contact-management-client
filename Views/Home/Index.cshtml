@{
	ViewData["Title"] = "Home Page";
}

<div class="container-fluid main-content">
	<div class="container-fluid action-section">
		<div class="search-action">
			<div class="search-bar row">
				<div class="search-text col-10">
					<input type="text" class="search-content" id="search-content" placeholder="Search" />
				</div>
			</div>
			<div class="search-criteria">
				<select id="search-criteria-select" class="search-criteria-dropdown">
					<option value="contactName" selected="true">Contact Name</option>
					<option value="email">Email</option>
					<option value="phoneNumber">Phone</option>
				</select>
			</div>
		</div>
		<div class="create-action">
			<div class="create-btn" onclick="addNew()">
				<span style="margin: 8px 12px; font-size: 20px; font-weight: 700; color: white;">Create+</span>
			</div>
		</div>
	</div>
	<div class="container-fluid display-section">
		<div class="table-display">
			<table>
				<thead style="background-color: black; color: white">
					<tr>
						<th>Image</th>
						<th>Contact Name</th>
						<th>Email</th>
						<th>Phone</th>
						<th>Label</th>
					</tr>
				</thead>
				<tbody id="table-body">
					
				</tbody>
			</table>
		</div>
	</div>

	<div id="context-menu" class="context-menu">
		<div class="context-menu-item" onclick="updateRow()">Update</div>
		<div class="context-menu-item" onclick="deleteRow()">Delete</div>
	</div>

	<div id="popup-form" class="popup-form">
		<div class="popup-content">
			<span class="close-btn" onclick="closeForm()">&times;</span>
			<h2>Update Contact</h2>
			<form id="update-form">
				<input type="hidden" id="contact-id" name="contact-id"/>
				<div class="form-field">
					<label class="form-label" for="contact-name">Contact Name</label>
					<input type="text" id="contact-name" name="ContactName" required>
				</div>
				<div class="form-field">
					<label class="form-label" for="email">Email</label>
					<input type="email" id="email" name="Email" required>
				</div>
				<div class="form-field">
					<label class="form-label" for="phone">Phone</label>
					<input type="text" id="phone" name="ContactNumber" required>
				</div>
				<div class="form-field">
					<label class="form-label" for="label">Label</label>
					<input type="text" id="label" name="Label" required>
				</div>
				<button id="save-btn" type="button" onclick="saveUpdates()">Save</button>
			</form>
		</div>
	</div>
</div>

<style>
	.main-content {
		display: flex;
		flex-direction: column;
		height: 100%;
		width: 100%;
		overflow: hidden;
		margin: 0px;
	}

	.action-section {
		display: flex;
		height: 86px;
		padding: 12px 28px;
		justify-content: space-between;
		border-bottom: solid black 1px;
	}

	.search-action {
		display: flex;
		gap: 24px;
	}

	.search-bar {
		height: 56px;
		width: 428px;
		border: solid black 2px;
		border-radius: 34px;
		padding: 0px;
	}

	.search-btn, .search-text {
		display: flex;
		align-items: center;
	}

	.search-content {
		margin: 0px;
		width: 368px;
		font-size: 20px;
		outline: none;
		border: none;
	}

	.search-icon {
		cursor: pointer;
		width: 100%;
		height: auto;
	}

	.search-criteria {
		display: flex;
		height: 56px;
		border-radius: 34px;
		padding: 0px 12px;
		border: solid black 2px;
		align-items: center;
		justify-content: center;
	}

	.search-criteria-dropdown {
		outline: none;
		border: none;
		cursor: pointer;
	}

	.create-action {
		display: flex;
		align-items: center;
	}

	.create-btn {
		display: flex;
		height: 48px;
		background-color: black;
		border-radius: 34px;
		padding: 0px 12px;
		border: solid black 1px;
		align-items: center;
		justify-content: center;
		cursor: pointer;
	}

	.display-section {
		margin-top: 36px;
		flex: 1;
	}

	th {
		border: solid white 1px;
		padding: 12px;
	}

	td {
		padding: 8px;
	}

	.avatar-icon {
		height: 32px;
		width: 32px;
		border-radius: 50%;
	}

	.element-content {
		font-weight: 700;
		margin-right: 168px;
	}

	.table-row:nth-child(2n) {
		background-color: #d4d6d5;
		color: #1e1f1e;
	}

	.context-menu {
		display: none;
		position: absolute;
		background-color: white;
		border: solid 1px black;
		z-index: 1000;
		box-shadow: 2px 2px 8px rgba(0,0,0,0.1);
	}

	.context-menu-item:hover {
		background-color: #f1f1f1;
	}

	.context-menu-item {
		padding: 8px 16px;
		cursor: pointer;
	}

	.popup-form {
		display: none;
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.5);
		z-index: 1000;
		justify-content: center;
		align-items: center;
	}

	.popup-content {
		background-color: white;
		padding: 20px;
		border-radius: 8px;
		width: 300px;
		box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
		position: relative;
	}

	.close-btn {
		position: absolute;
		top: 10px;
		right: 10px;
		cursor: pointer;
		font-size: 20px;
	}

	.form-field {
		display: flex;
		gap: 5px;
		margin-bottom: 12px;
	}

	.form-label {
		width: 269px;
	}

</style>
<script>
	// Get the context menu and the rows
	const contextMenu = document.getElementById('context-menu');
	const searchContent = document.getElementById("search-content");
	const searchCriteria = document.getElementById("search-criteria-select");
	var contactList = [];
	searchContent.addEventListener("input", doSearch);
	searchCriteria.addEventListener("change", doSearch);

	function doSearch(e) {
		var criteria = searchCriteria.value;
		var data = contactList.filter(x => {
			const searchValue = searchContent.value.toLowerCase();

			if (criteria === "contactName") {
				return x.contactName.toLowerCase().includes(searchValue);
			}
			if (criteria === "email") {
				return x.email.toLowerCase().includes(searchValue);
			}
			return x.phone.toLowerCase().includes(searchValue);
		});

		showData(data);
	}
	function showContextMenu(event, row) {
		event.preventDefault();
		contextMenu.style.top = `${event.clientY}px`;
		contextMenu.style.left = `${event.clientX}px`;
		contextMenu.style.display = 'block';
		contextMenu.dataset.rowIndex = row.rowIndex;  // Store row index in data attribute
	}
	setInterval(() => {
		var token = getCookie("token");
		fetch("https://localhost:7167/api/Auth/GetRefreshToken", {
			method: "GET",
			headers: {
				"Authorization": `Bearer ${token}`,
			}
		})
			.then(response => {
				if (response.status == 401) {
					window.location.href = "Login";
				}
				return response.json();
			})
			.then(data => {
				setCookie("token", data.token, 15);
			})
	}, 10*60*1000)

	window.addEventListener('click', () => {
		contextMenu.style.display = 'none';
	});

	function updateRow() {
		const rowIndex = contextMenu.dataset.rowIndex;
		const table = document.querySelector('table');
		const row = table.rows[rowIndex];
		showPopupForm(row);
	}

	function deleteRow() {
		if (!confirm("Are you sure you want to delete this row?")) {
			return;
		}
		const rowIndex = contextMenu.dataset.rowIndex;
		const table = document.querySelector('table');
		const row = table.rows[rowIndex];
		const contactId = row.id.replace("contact-", "");

		if (!getCookie("token")) {
			return;
		}

		var token = getCookie("token");
		fetch(`https://localhost:7167/api/Contact/${contactId}`, {
			method: "DELETE",
			mode: "cors",
			cache: "no-cache",
			credentials: "same-origin",
			headers: {
				"Authorization": `Bearer ${token}`,
			},
			redirect: "follow",
			referrerPolicy: "no-referrer",
		})
			.then(response => {
				if (response.status == 500) {
					alert(response.body)
				}
				alert("successfully delete");
				loadData();
			});
	}

	function showPopupForm(row) {
		if (row) {
			const contactId = row.id.replace("contact-", "");
			const contactName = row.cells[1].textContent;
			const email = row.cells[2].textContent;
			const phone = row.cells[3].textContent;
			const label = row.cells[4].textContent;

			document.getElementById('contact-id').value = contactId;
			document.getElementById('contact-name').value = contactName;
			document.getElementById('email').value = email;
			document.getElementById('phone').value = phone;
			document.getElementById('label').value = label;
		}
		document.getElementById('popup-form').style.display = 'flex';
	}

	// Function to close the popup form
	function closeForm() {
		const formInput = document.querySelectorAll(".form-field > input");

		formInput.forEach(element => {
			element.setAttribute('readonly', false);
		});
		document.getElementById("save-btn").hidden = false;

		document.getElementById('popup-form').style.display = 'none';
	}

	function addNew() {
		var form = document.getElementById('update-form');
		const formData = new FormData(form);
		if (!getCookie("token")) {
			return;
		}
		var token = getCookie("token");
		showPopupForm(null);
	}

	// Function to save updates
	function saveUpdates() {
		const contactId = document.getElementById('contact-id').value;
		var form = document.getElementById('update-form');
		const formData = new FormData(form);
		if (!getCookie("token")) {
			return;
		}
		var token = getCookie("token");

		if (!contactId) {
			fetch(`https://localhost:7167/api/Contact`, {
				method: "POST",
				mode: "cors",
				cache: "no-cache",
				credentials: "same-origin",
				headers: {
					"Authorization": `Bearer ${token}`,
				},
				body: formData,
				redirect: "follow",
				referrerPolicy: "no-referrer",
			})
				.then(response => {
					if (response.status == 500) {
						alert("server error")
					}
					if (response.status == 400) {
						alert('bad request')
					}
					loadData();
					closeForm();
				});
		} else {
			fetch(`https://localhost:7167/api/Contact/${contactId}`, {
				method: "PUT",
				mode: "cors",
				cache: "no-cache",
				credentials: "same-origin",
				headers: {
					"Authorization": `Bearer ${token}`,
				},
				body: formData,
				redirect: "follow",
				referrerPolicy: "no-referrer",
			})
				.then(response => {
					if (response.status == 500) {
						alert(response.body)
					}
					if (response.status == 400) {
						alert(response.json())
					}
					loadData();
					closeForm();
				});
		}
		
		
	}

	function loadData() {
		if (!getCookie("token")) {
			window.location.href = "/Login";
			return;
		}
		var token = getCookie("token");

		fetch("https://localhost:7167/api/Contact", {
			method: "GET",
			mode: "cors",
			cache: "no-cache",
			credentials: "same-origin",
			headers: {
				"Authorization": `Bearer ${token}`
			},
			redirect: "follow",
			referrerPolicy: "no-referrer",
		})
			.then(response => {
				if (response.status == 401) {
					alert(response.body);
				}
				return response.json();
			})
			.then(data => {
				contactList = data;
				showData(contactList);
			});
	}

	function showData(data) {
		const tableBody = document.getElementById("table-body");
		tableBody.innerHTML = "";

		data.forEach(element => {
			tableBody.innerHTML += `<tr class="table-row" id="contact-${element.contactId}">
											<td><img class="avatar-icon element-content" src="${element.image}" alt="Alternate Text" /></td>
												<td><span class="element-content">${element.contactName}</span></td>
											<td><span class="element-content">${element.email}</span></td>
											<td><span class="element-content">${element.phone}</span></td>
											<td><span class="element-content">${element.label}</span></td>
									</tr>`;
		});

		const tableRows = document.querySelectorAll('.table-row');

		tableRows.forEach(row => {
			row.addEventListener('contextmenu', (event) => {
				showContextMenu(event, row);
			});
			row.addEventListener('click', (event) => {
				const formInput = document.querySelectorAll(".form-field > input");

				formInput.forEach(element => {
					element.setAttribute('readonly', true);
				});
				document.getElementById("save-btn").hidden = true;
				showPopupForm(row);
			});
		});
	}

	function getCookie(cname) {
		let name = cname + "=";
		let decodedCookie = decodeURIComponent(document.cookie);
		let ca = decodedCookie.split(";");
		for (let i = 0; i < ca.length; i++) {
			let c = ca[i];
			while (c.charAt(0) == " ") {
				c = c.substring(1);
			}
			if (c.indexOf(name) == 0) {
				return c.substring(name.length, c.length);
			}
		}
		return "";
	}

	function setCookie(name, value, minutes) {
		const date = new Date();
		date.setTime(date.getTime() + (minutes * 60 * 1000));
		const expires = "expires=" + date.toUTCString();
		document.cookie = name + "=" + value + ";" + expires + ";path=/";
	}

	function deleteCookie(name) {
		// Set the cookie with the specified name to expire in the past
		document.cookie =
			name + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
	}

	loadData();
</script>

